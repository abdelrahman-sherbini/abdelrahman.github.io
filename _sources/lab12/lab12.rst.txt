Practical Malware Analysis - Lab 12
===================================

Lab 12-1
--------
Analyze the malware found in the file Lab12-01.exe and Lab12-01.dll. Make
sure that these files are in the same directory when performing the analysis.

**Q1: What happens when you run the malware executable?**

On procmon we don't get much but noticed a lot of file mapping into memory maybe it will modify some process in memory

.. image:: 1q2.png

**Q2: What process is being injected?**

lets pull the exe into ida, in imports we see CreateRemoteThread and the required functions for it, we could say it uses dll 
injection into remote thread

.. image:: 1q3.png

Look at the functions list we find only one function then the main function
in sub_401000 we see all its doing is converting PID to a process name then comparing it to explorer.exe to return 1
so we can say its injecting explorer (Almost same ``PrintProcessNameAndID`` function in (MSDN)[https://learn.microsoft.com/en-us/windows/win32/psapi/enumerating-all-processes] )

.. image:: 1q5.png


**Q3: How can you make the malware stop the pop-ups?**

By restarting explorer.exe like cmd command ``wmic process where name="explorer.exe" call terminate``

**Q4: How does this malware operate?**

lets go over the exe, in first part its importing psapi.dll functions:EnumProcessModules, EnumProcesses,GetModuleBaseNameA (they do as their name suggests)
then it sets ``Buffer`` to Lab12-01.dll location

.. image:: 1q6.png

Second part enumerating-all-processes then saving list of process identifiers in dwprocessid, and saving number of processes in v7 (v14 >>>2->v14 / 2^2  where 4 bytes is size of DWORD ,its calculating all bytes returns over size of single process)
then it is passing all process identifiers (pid) to 40100 function we said above to check if there is explorer, when found it gets a handle to explorer

.. image:: 1q7.png

Now the overhead is done, the main part here, first it allocates space in explorer process memory then writing Lab12-01.dll to it 
then calling CreateRemoteThread with all prepared parameters (handle to loadlibrary +handle to explorer +the base address where Lab12-01.dll where written to ,to load it )

.. image:: 1q8.png

in the dll simple program in a loop to create a thread with open messagebox 

.. image:: 1q9.png

.. image:: 1q10.png


Lab 12-2
--------
Analyze the malware found in the file Lab12-02.exe.

**Q1: What is the purpose of this program?**

In the imports we see it is importing to write something to another process memory 

.. image:: 2q2.png

then we see it loading resource maybe it is hiding something in its resources 

.. image:: 2q1.png

at main we see it first passes ApplicationName and string containing ``\\svchost.exe`` and calls 40149D
Then pass a handle to the calling (exe) process and calls 40132C

.. image:: 2q3.png

| we will first check 40149D routine
| Looks like it just concatenates the systemdirectory to \\svchost output to -> ApplicationName 

.. image:: 2q4.png

| going to the second call 40132C 

It loads something from resource with name ``LOCALIZATION`` and type ``UNICODE`` then allocates place in memory copies the resource to it 
and checks if first character or second character doesnt equal to ``MZ`` (which is start of exe file)
then calls 401000 routine maybe it will decode what is in the resource

.. image::2q5.png

Yup it xors the resource file with 65

.. image:: 2q6.png

then all the routine returns pointer to the start of allocated memory which contains the decoded resource

.. image:: 2q7.png

It then calls 4010EA with parameters decoded resource (lpBuffer) and svchost (lpApplicationName) 
| after the call it zeroes the ApplicationName and virtualfrees the decoded resource

.. image:: 2q8.png

into 4010EA, it does some checks then starts process with name of module to be executed svchost.exe 

.. image:: 2q9.png

notice it created the process in suspended state with creationflag set to 0x4 means it used to load a process into memory and suspend it at the entrypoint.

.. image:: 9q9.png

with similar overhead discussed in Lab12-01 to allocate space for the decoded resource
and using ZwUnmapViewOfSection to release all memory pointed to by a section passed as a parameter (the svchost)

.. image:: 2q10.png

then Once the process is created, the next step is to replace the victim processâ€™s
memory with the malicious executable and uses ``WriteProcessMemory`` to write each of
the malware sections to the victim process space

.. image:: 2q11.png

In the final step, the malware restores the victim process environment so
that the malicious code can run by calling SetThreadContext to set the entry
point to point to the malicious code. Finally, ResumeThread is called to initiate
the malware, which has now replaced the victim process.

.. image:: 2q12.png

We can gather now it is process replacement (hollowing) malware

**Q2: How does the launcher program hide execution?**

answered above by process hollowing

**Q3: Where is the malicious payload stored?**

answered above in .rsrc 

**Q4: How is the malicious payload protected?**

answered above by encoding routine

**Q5: How are strings protected?**

answered above by encoding routine

Lab 12-3
--------
Analyze the malware extracted during the analysis of Lab 12-2, or use the file
Lab12-03.exe.

**Q1: What is the purpose of this malicious payload?**

**Q2: How does the malicious payload inject itself?**

**Q3: What filesystem residue does this program create?**


Lab 12-4
--------
Analyze the malware found in the file Lab12-04.exe.

**Q1: What does the code at 0x401000 accomplish?**

**Q2: Which process has code injected?**

**Q3: What DLL is loaded using LoadLibraryA?**

**Q4: What is the fourth argument passed to the CreateRemoteThread call?**

**Q5: What malware is dropped by the main executable?**

**Q6: What is the purpose of this and the dropped malware?**

